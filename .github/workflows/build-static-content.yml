name: 从 R2 构建静态内容

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      source:
        description: '数据源类型'
        required: true
        default: 'r2_storage'
        type: choice
        options:
          - r2_storage
          - manual_trigger
      force_rebuild:
        description: '强制重新构建所有内容'
        required: false
        default: 'false'
        type: boolean

# 设置权限
permissions:
  contents: write  # 需要写权限来提交到不同分支
  actions: read

# 并发控制，确保同时只有一个构建在运行
concurrency:
  group: "build-static-content"
  cancel-in-progress: true

env:
  R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
  R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
  R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
  R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
  STATIC_BRANCH: 'static-content'  # 静态内容分支名称

jobs:
  build:
    name: 从 R2 构建静态内容
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 获取完整历史记录
          fetch-depth: 0
          # 使用 GitHub token 进行身份验证
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 检查 R2 配置
        run: |
          echo "🔍 检查 R2 配置..."
          if [ -z "$R2_ACCOUNT_ID" ] || [ -z "$R2_ACCESS_KEY_ID" ] || [ -z "$R2_SECRET_ACCESS_KEY" ] || [ -z "$R2_BUCKET_NAME" ]; then
            echo "❌ R2 配置不完整，请检查环境变量"
            exit 1
          fi
          echo "✅ R2 配置检查通过"
      
      - name: 创建静态内容分支
        run: |
          echo "🌿 创建/切换到静态内容分支: $STATIC_BRANCH"
          
          # 检查分支是否存在
          if git ls-remote --heads origin $STATIC_BRANCH | grep -q $STATIC_BRANCH; then
            echo "📋 分支 $STATIC_BRANCH 已存在，切换到该分支"
            git checkout -b $STATIC_BRANCH origin/$STATIC_BRANCH
          else
            echo "🆕 分支 $STATIC_BRANCH 不存在，创建新分支"
            git checkout -b $STATIC_BRANCH
          fi
      
      - name: 从 R2 获取笔记源文件
        run: |
          echo "📥 从 R2 获取笔记源文件..."
          
          # 创建临时目录
          mkdir -p temp-notes
          
          # 使用 Node.js 脚本从 R2 获取文件
          node -e "
          const { S3Client, ListObjectsV2Command, GetObjectCommand } = require('@aws-sdk/client-s3');
          const fs = require('fs');
          const path = require('path');
          
          const s3Client = new S3Client({
            region: 'auto',
            endpoint: \`https://\${process.env.R2_ACCOUNT_ID}.r2.cloudflarestorage.com\`,
            credentials: {
              accessKeyId: process.env.R2_ACCESS_KEY_ID,
              secretAccessKey: process.env.R2_SECRET_ACCESS_KEY,
            },
          });
          
          async function downloadNotes() {
            try {
              // 列出所有笔记文件
              const listCommand = new ListObjectsV2Command({
                Bucket: process.env.R2_BUCKET_NAME,
                Prefix: 'notes/',
              });
              
              const listResponse = await s3Client.send(listCommand);
              const noteKeys = listResponse.Contents?.filter(obj => obj.Key?.endsWith('.md')) || [];
              
              console.log(\`📋 发现 \${noteKeys.length} 个笔记文件\`);
              
              // 下载每个笔记文件
              for (const obj of noteKeys) {
                if (obj.Key) {
                  const getCommand = new GetObjectCommand({
                    Bucket: process.env.R2_BUCKET_NAME,
                    Key: obj.Key,
                  });
                  
                  const response = await s3Client.send(getCommand);
                  const content = await response.Body?.transformToString();
                  
                  if (content) {
                    const fileName = path.basename(obj.Key);
                    const filePath = path.join('temp-notes', fileName);
                    fs.writeFileSync(filePath, content);
                    console.log(\`✅ 下载: \${fileName}\`);
                  }
                }
              }
              
              console.log('🎉 所有笔记文件下载完成');
            } catch (error) {
              console.error('❌ 下载笔记文件失败:', error);
              process.exit(1);
            }
          }
          
          downloadNotes();
          "
      
      - name: 构建静态内容
        run: |
          echo "🚀 开始构建静态内容..."
          
          # 将下载的笔记移动到 notes 目录
          if [ -d "temp-notes" ] && [ "$(ls -A temp-notes)" ]; then
            mkdir -p notes
            mv temp-notes/*.md notes/ 2>/dev/null || true
            echo "📝 移动了 $(ls notes/*.md 2>/dev/null | wc -l) 个笔记文件到 notes 目录"
          fi
          
          # 运行构建脚本
          node scripts/build-static-content.js
      
      - name: 验证构建输出
        run: |
          echo "🔍 验证构建输出..."
          ls -la public/
          
          if [ -f "public/public-notes.json" ]; then
            echo "✅ public-notes.json 生成成功"
            echo "📄 公开笔记文件大小: $(du -h public/public-notes.json | cut -f1)"
          else
            echo "❌ public-notes.json 未生成"
            exit 1
          fi
          
          if [ -f "public/all-notes.json" ]; then
            echo "✅ all-notes.json 生成成功"
            echo "📄 完整笔记文件大小: $(du -h public/all-notes.json | cut -f1)"
          else
            echo "❌ all-notes.json 未生成"
            exit 1
          fi
          
          if [ -f "public/build-info.json" ]; then
            echo "✅ build-info.json 生成成功"
            echo "📋 构建信息:"
            cat public/build-info.json | jq '.'
          else
            echo "❌ build-info.json 未生成"
            exit 1
          fi
      
      - name: 提交到静态内容分支
        run: |
          echo "📝 提交构建结果到分支: $STATIC_BRANCH"
          
          # 配置 git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加所有构建输出文件
          git add public/ notes/
          
          # 检查是否有变更
          if git diff --staged --quiet; then
            echo "📝 没有检测到构建输出的变更"
          else
            echo "📝 检测到构建输出变更，提交更新"
            
            # 获取笔记统计
            NOTE_COUNT=$(find notes -name "*.md" 2>/dev/null | wc -l)
            PUBLIC_COUNT=$(jq '.length' public/public-notes.json 2>/dev/null || echo "0")
            TOTAL_COUNT=$(jq '.length' public/all-notes.json 2>/dev/null || echo "0")
            
            git commit -m "🤖 从 R2 自动更新静态内容 [skip ci]

📊 构建统计:
- 构建时间: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
- 源文件数量: $NOTE_COUNT
- 公开笔记: $PUBLIC_COUNT
- 总笔记数: $TOTAL_COUNT
- 数据源: ${{ github.event.inputs.source || 'r2_storage' }}
- 触发方式: ${{ github.event_name }}

🔗 相关提交: ${{ github.sha }}"
            
            # 推送到静态内容分支
            git push origin $STATIC_BRANCH
            echo "✅ 静态内容已推送到分支: $STATIC_BRANCH"
          fi
      
      - name: 清理临时文件
        if: always()
        run: |
          echo "🧹 清理临时文件..."
          rm -rf temp-notes notes/
          echo "✅ 清理完成"
      
      - name: 构建状态通知
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 从 R2 构建静态内容成功完成！"
            echo "🌿 静态内容已推送到分支: $STATIC_BRANCH"
          else
            echo "❌ 从 R2 构建静态内容失败"
          fi
